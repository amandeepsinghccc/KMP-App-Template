name: Build iOS app for Device Testing

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: Build Device-Runnable iOS IPA
    runs-on: macOS-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Set Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      # Import development certificate and provisioning profile
      - name: Import Code-Signing Certificates
        if: ${{ secrets.APPLE_DEV_CERTIFICATE_BASE64 }}
        run: |
          # Create keychain
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Import certificate
          echo "${{ secrets.APPLE_DEV_CERTIFICATE_BASE64 }}" | base64 -d > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEV_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # Set default keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain

      - name: Install Provisioning Profile
        if: ${{ secrets.APPLE_DEV_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.APPLE_DEV_PROVISIONING_PROFILE_BASE64 }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/development.mobileprovision

      # Build with development signing
      - name: Build signed iOS app
        run: |
          cd iosApp
          if [ -n "${{ secrets.APPLE_DEV_CERTIFICATE_BASE64 }}" ]; then
            echo "Building with development signing..."
            xcodebuild -scheme iosApp \
              -configuration Debug \
              -destination 'generic/platform=iOS' \
              -archivePath KMP_App.xcarchive \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
              CODE_SIGN_IDENTITY="iPhone Developer" \
              PROVISIONING_PROFILE_SPECIFIER="development" \
              archive
          else
            echo "No signing certificates found. Building unsigned..."
            xcodebuild -scheme iosApp \
              -configuration Debug \
              -destination 'generic/platform=iOS' \
              CODE_SIGNING_ALLOWED='NO' \
              ARCHS='arm64'
          fi

      # Create IPA
      - name: Create IPA
        run: |
          cd iosApp
          if [ -d "KMP_App.xcarchive" ]; then
            # Create export options
            cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          
            # Export archive to IPA
            xcodebuild -exportArchive \
              -archivePath KMP_App.xcarchive \
              -exportPath ./export \
              -exportOptionsPlist exportOptions.plist
          
            # Copy IPA to root
            cp export/*.ipa ../KMP_App_Development.ipa
            echo "Signed IPA created successfully"
          else
            # Fallback: create unsigned IPA from .app
            APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "KMP*.app" -path "*/Debug-iphoneos/*" -type d)
            if [ -n "$APP_PATH" ]; then
              mkdir -p Payload
              cp -r "$APP_PATH" Payload/
              cd ..
              zip -r KMP_App_Unsigned.ipa iosApp/Payload/
              rm -rf iosApp/Payload
              echo "Unsigned IPA created (won't run on device without jailbreak)"
            fi
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-development
          path: |
            KMP_App_Development.ipa
            KMP_App_Unsigned.ipa
          retention-days: 7

      - name: Display build info
        run: |
          echo "Build completed!"
          if [ -f "KMP_App_Development.ipa" ]; then
            echo "✅ Signed development IPA created - can be installed on registered devices"
          elif [ -f "KMP_App_Unsigned.ipa" ]; then
            echo "⚠️ Unsigned IPA created - won't run on non-jailbroken devices"
          fi
          ls -la *.ipa 2>/dev/null || echo "No IPA files found"